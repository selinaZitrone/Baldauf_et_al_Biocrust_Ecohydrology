/***************************************************************************************//**
 * \class   Element Sortedlist.h
 * \brief   This is just because I didn't know the official list in c++ when I programmed this
 * \author  Britta Tietjen
 *
 * \class   CellList Sortedlist.h
 * \brief   This is just because I didn't know the official list in c++ when I programmed this
 * \author  Britta Tietjen
 *******************************************************************************************/

#ifndef SORTEDLIST_H_
#define SORTEDLIST_H_

/* element of a list */
class Element{
	private:
	public:
        //Constructor and Destructor
        /***************************************************************************************//**
         * \brief Constructor
         * \todo include params here
         *******************************************************************************************/
		Element(int x, int y, int cells, int cellsPrev);

        /***************************************************************************************//**
         * \brief Default constructor
         *******************************************************************************************/
		Element();

        /***************************************************************************************//**
         * \brief Destructor
         *******************************************************************************************/
		~Element();

		//Parameters
		int xval;
		int yval;
        int noOfCells;
		int noOfCellsPrev;

		//Fields
		Element* next;
		Element* previous;

};

/* list that can insert elements in a sorted way */
class CellList {
	private:
	public:
        //Constructor and Destructor
        /***************************************************************************************//**
         * \brief Constructor
         *******************************************************************************************/
		CellList();

        /***************************************************************************************//**
         * \brief Destructor
         *******************************************************************************************/
		~CellList();

		//Member functions
        /***************************************************************************************//**
         * \brief Is the list empty?
         *******************************************************************************************/
		bool empty();

        /***************************************************************************************//**
         * \brief Is the actual element the last one of the list?
         *******************************************************************************************/
		bool endpos();

        /***************************************************************************************//**
         * \brief Start at the first list element!
         *******************************************************************************************/
		void reset();

        /***************************************************************************************//**
         * \brief One step forward in the list!
         *******************************************************************************************/
		void advance();

        /***************************************************************************************//**
         * \brief Insert new element at the end of the list!
         * \param newElement pointer to element object!
         *******************************************************************************************/
		void insertEnd(Element* newElement);

        /***************************************************************************************//**
         * \brief Insert new element at the right place!
         * \param newElement pointer to element object!
         *******************************************************************************************/
		void insertSorted(Element* newElement);

        /***************************************************************************************//**
         * \brief Delete the actual element!
         *******************************************************************************************/
		void del();

        /***************************************************************************************//**
         * \brief Destructor
         *******************************************************************************************/
		void delAll();

		//Fields
		Element* first;
		Element* position;
};

#endif /*SORTEDLIST_H_*/

